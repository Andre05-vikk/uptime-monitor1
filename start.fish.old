#!/opt/homebrew/bin/fish

# Uptime Monitor - Start Script (Fish Shell)
# Käivitab PHP serveri ja avab brauseri

echo "🚀 Starting Uptime Monitor..."

# Check if port 8080 is already in use
if lsof -Pi :8080 -sTCP:LISTEN -t >/dev/null 2>&1
    echo "⚠️  Port 8080 is already in use. Stopping existing process..."
    lsof -ti:8080 | xargs kill -9 2>/dev/null; or true
    sleep 2
end

# Get current directory
set SCRIPT_DIR (dirname (realpath (status --current-filename)))
cd $SCRIPT_DIR

# Clear any existing PHP sessions
echo "🧹 Clearing old sessions..."
if test -d /tmp
    rm -f /tmp/sess_* 2>/dev/null; or true
end
# Also clear local session files if they exist
rm -f .sessions/* 2>/dev/null; or true

# Start PHP development server in background
echo "🔧 Starting PHP server on localhost:8080..."
php -S localhost:8080 > server.log 2>&1 &
set SERVER_PID $last_pid

# Wait a moment for server to start
sleep 3

# Check if server started successfully
if not lsof -Pi :8080 -sTCP:LISTEN -t >/dev/null 2>&1
    echo "❌ Failed to start PHP server. Check server.log for details."
    exit 1
end

echo "✅ PHP server started successfully (PID: $SERVER_PID)"

# Start automatic monitoring in background
echo "🔄 Starting automatic monitoring (30-second intervals)..."
fish auto-monitor.fish > auto-monitor.log 2>&1 &
set MONITOR_PID $last_pid

echo "✅ Automatic monitoring started (PID: $MONITOR_PID)"
echo "📊 Server running at: http://localhost:8080"
echo "📝 Server logs: server.log"
echo "📈 Monitor logs: auto-monitor.log"

# Open browser (works on macOS)
if command -v open >/dev/null 2>&1
    echo "🌐 Opening browser with fresh session..."
    open "http://localhost:8080?fresh=1"
else
    echo "🌐 Please open http://localhost:8080?fresh=1 in your browser"
end

echo ""
echo "🔄 System running with automatic monitoring every 30 seconds"
echo "⏹️  To stop everything, run: ./stop.fish"
echo "   Or press Ctrl+C"

# Keep script running to show logs
echo "📊 System is running. Press Ctrl+C to stop..."
echo "📄 Recent activity:"
echo "----------------------------------------"

# Set up trap for Ctrl+C
function cleanup
    echo ""
    echo "🛑 Stopping all processes..."
    kill $SERVER_PID 2>/dev/null; or true
    kill $MONITOR_PID 2>/dev/null; or true
    exit 0
end

trap cleanup INT

# Show combined logs (server + monitoring)
tail -f server.log auto-monitor.log
